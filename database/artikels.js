import BaseQueries from "./BaseQueries.js";
import QueryString from "./QueryStrings.js";

// TABLE NAME AND COLUMNS

const TABLE_NAME = "artikelen";

const COLUMN_ID = "id"
const COLUMN_ARTIKEL_CODE = "artikelcode"
const COLUMN_NAAM = "naam"
const COLUMN_PRIJS = "prijs"
const COLUMN_OMSCHRIJVING = "omschrijving"
const COLUMN_LEVERANCIER_ID = "leverancier_id"
const COLUMN_VERKOOPEENHEID = "verkoopeenheid"
const COLUMN_EAN = "ean"
const COLUMN_MEMO = "memo"
const COLUMN_VALUTA = "valuta"
const COLUMN_NETTO = "netto"
const COLUMN_KOSTEN = "kosten"
const COLUMN_MARGE = "marge"
const COLUMN_IN_STOCK = "inStock"
const COLUMN_IS_ACTIVE = "isActive"
const COLUMN_UPDATED_TIME = "updated_time"
const COLUMN_UPDATED_BY = "updated_by"
const COLUMN_BEDRIJF_ID = "bedrijfs_id"


const TABLE_JOIN_LEVERANCIER = "leveranciers"

const COLUMN_LEV_ID = "id"
const COLUMN_LEV_NAAM = "naam"

const ALIAS_LEV_ID = "leverancier_id"
const ALIAS_LEV_NAAM = "leverancier_naam"

const TABLE_JOIN_GEBRUIKER = "gebruikers"

const COLUMN_GEBR_ID = "id"
const COLUMN_GEBR_VOORNAAM = "voornaam"
const COLUMN_GEBR_ACHTERNAAM = "achternaam"

const ALIAS_GEBR_ID = "updated_by"
const ALIAS_GEBR_VOORNAAM = "updated_by_voornaam"
const ALIAS_GEBR_ACHTERNAAM = "updated_by_achternaam"

// QUERIES

function QUERY_GET_ALL(sort_field, sort_order){
    const fields = ["artikelcode", "naam", "prijs", "omschrijving"]

    const QUERY = `SELECT ${TABLE_NAME}.${COLUMN_ID}, ${TABLE_NAME}.${COLUMN_ARTIKEL_CODE}, ${TABLE_NAME}.${COLUMN_PRIJS}, ${TABLE_NAME}.${COLUMN_NAAM}, ${TABLE_NAME}.${COLUMN_OMSCHRIJVING}, ${TABLE_NAME}.${COLUMN_IN_STOCK}, ${TABLE_NAME}.${COLUMN_UPDATED_TIME}, `
    const QUERY_JOIN_GEBRUIKER = `${TABLE_JOIN_GEBRUIKER}.${COLUMN_GEBR_ID} "${ALIAS_GEBR_ID}", ${TABLE_JOIN_GEBRUIKER}.${COLUMN_GEBR_VOORNAAM} "${ALIAS_GEBR_VOORNAAM}", ${TABLE_JOIN_GEBRUIKER}.${COLUMN_GEBR_ACHTERNAAM} "${ALIAS_GEBR_ACHTERNAAM}" FROM ${TABLE_NAME} `
    const JOIN_GEBRUIKERS = `LEFT JOIN ${TABLE_JOIN_GEBRUIKER} ON ${TABLE_NAME}.${COLUMN_UPDATED_BY} = ${TABLE_JOIN_GEBRUIKER}.${COLUMN_GEBR_ID} `;
    const WHERE = `WHERE ${TABLE_NAME}.${COLUMN_IS_ACTIVE} = 1 AND ${TABLE_NAME}.${COLUMN_BEDRIJF_ID} = ? `
    return QUERY + QUERY_JOIN_GEBRUIKER + JOIN_GEBRUIKERS + WHERE + QueryString.all(fields, sort_field, sort_order)
}

function QUERY_COUNT(){
    const fields = ["artikelcode", "naam", "prijs", "omschrijving"]
    
    return BaseQueries.count(TABLE_NAME, fields)
}

function QUERY_GET() {
    const QUERY = `SELECT ${TABLE_NAME}.${COLUMN_ID}, ${TABLE_NAME}.${COLUMN_ARTIKEL_CODE}, ${TABLE_NAME}.${COLUMN_NAAM}, ${TABLE_NAME}.${COLUMN_PRIJS}, ${TABLE_NAME}.${COLUMN_OMSCHRIJVING}, ${TABLE_NAME}.${COLUMN_VERKOOPEENHEID}, ${TABLE_NAME}.${COLUMN_EAN}, ${TABLE_NAME}.${COLUMN_MEMO}, ${TABLE_NAME}.${COLUMN_VALUTA}, ${TABLE_NAME}.${COLUMN_NETTO}, ${TABLE_NAME}.${COLUMN_KOSTEN}, ${TABLE_NAME}.${COLUMN_MARGE}, ${TABLE_NAME}.${COLUMN_IN_STOCK}, ${TABLE_NAME}.${COLUMN_IS_ACTIVE}, ${TABLE_NAME}.${COLUMN_UPDATED_TIME}, ${TABLE_NAME}.${COLUMN_BEDRIJF_ID}, `
    const QUERY_JOIN_LEV = `${TABLE_JOIN_LEVERANCIER}.${COLUMN_LEV_ID} "${ALIAS_LEV_ID}", ${TABLE_JOIN_LEVERANCIER}.${COLUMN_LEV_NAAM} "${ALIAS_LEV_NAAM}", `
    const QUERY_JOIN_GEBRUIKER = `${TABLE_JOIN_GEBRUIKER}.${COLUMN_GEBR_ID} "${ALIAS_GEBR_ID}", ${TABLE_JOIN_GEBRUIKER}.${COLUMN_GEBR_VOORNAAM} "${ALIAS_GEBR_VOORNAAM}", ${TABLE_JOIN_GEBRUIKER}.${COLUMN_GEBR_ACHTERNAAM} "${ALIAS_GEBR_ACHTERNAAM}" FROM ${TABLE_NAME} `
    const JOIN_LEV = `LEFT JOIN ${TABLE_JOIN_LEVERANCIER} ON ${TABLE_NAME}.${COLUMN_LEVERANCIER_ID} = ${TABLE_JOIN_LEVERANCIER}.${COLUMN_LEV_ID} `;
    const JOIN_GEBRUIKERS = `LEFT JOIN ${TABLE_JOIN_GEBRUIKER} ON ${TABLE_NAME}.${COLUMN_UPDATED_BY} = ${TABLE_JOIN_GEBRUIKER}.${COLUMN_GEBR_ID} `;
    const WHERE = `WHERE ${TABLE_NAME}.${COLUMN_ID} = ?`
    return QUERY + QUERY_JOIN_LEV + QUERY_JOIN_GEBRUIKER + JOIN_BTW + JOIN_LEV + JOIN_GEBRUIKERS + WHERE
}

function QUERY_CREATE() {
    const COLUMNS = [COLUMN_ARTIKEL_CODE, COLUMN_NAAM, COLUMN_PRIJS, COLUMN_OMSCHRIJVING, COLUMN_LEVERANCIER_ID, COLUMN_VERKOOPEENHEID, COLUMN_EAN, COLUMN_MEMO, COLUMN_VALUTA, COLUMN_NETTO, COLUMN_KOSTEN, COLUMN_MARGE, COLUMN_IN_STOCK, COLUMN_UPDATED_BY, COLUMN_BEDRIJF_ID]
    return BaseQueries.create(TABLE_NAME, COLUMNS)
}

function QUERY_UPDATE() {
    const COLUMNS = [COLUMN_ARTIKEL_CODE, COLUMN_NAAM, COLUMN_PRIJS, COLUMN_OMSCHRIJVING, COLUMN_LEVERANCIER_ID, COLUMN_VERKOOPEENHEID, COLUMN_EAN, COLUMN_MEMO, COLUMN_VALUTA, COLUMN_NETTO, COLUMN_KOSTEN, COLUMN_MARGE, COLUMN_IN_STOCK, COLUMN_UPDATED_BY, COLUMN_BEDRIJF_ID]
    return BaseQueries.update(TABLE_NAME, COLUMNS)
}
  
function QUERY_DELETE() {
    return BaseQueries.delete(TABLE_NAME)
}

function QUERY_STOCK() {
    return BaseQueries.stock(TABLE_NAME)
}

export { QUERY_GET, QUERY_GET_ALL, QUERY_COUNT, QUERY_CREATE, QUERY_UPDATE , QUERY_DELETE, QUERY_STOCK };